    def add_room(self):
        # 创建添加房间的顶层窗口
        add_room_win = tk.Toplevel(self.root)
        add_room_win.title("添加房间")
        add_room_win.geometry("300x220")

        # 房间号标签与输入框
        ttk.Label(add_room_win, text="房间号:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        room_number_entry = ttk.Entry(add_room_win)
        room_number_entry.grid(row=0, column=1, padx=5, pady=5)

        # 房间类型标签与输入框
        ttk.Label(add_room_win, text="房间类型:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        room_type_entry = ttk.Entry(add_room_win)
        room_type_entry.grid(row=1, column=1, padx=5, pady=5)

        # 价钱标签与输入框
        ttk.Label(add_room_win, text="价钱(元):").grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
        price_entry = ttk.Entry(add_room_win)
        price_entry.grid(row=2, column=1, padx=5, pady=5)

        # 清洁状态标签与输入框
        ttk.Label(add_room_win, text="清洁状态:").grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)
        clean_status_entry = ttk.Entry(add_room_win)
        clean_status_entry.grid(row=3, column=1, padx=5, pady=5)

        def save_room():
            room_number = room_number_entry.get()
            room_type = room_type_entry.get()
            price = price_entry.get()
            clean_status = clean_status_entry.get()

            # 校验必填项
            if not (room_number and room_type and price and clean_status):
                messagebox.showerror("错误", "房间号、房间类型、价钱、清洁状态均为必填项")
                return

            # 校验房间号为整数
            if not room_number.isdigit():
                messagebox.showerror("错误", "房间号必须为整数")
                return

            # 校验价钱为数字
            try:
                float(price)
            except ValueError:
                messagebox.showerror("错误", "价钱必须为有效数字（如：300.0）")
                return

            try:
                conn = sqlite3.connect('hotel.db')
                cursor = conn.cursor()

                # 检查房间号是否已存在
                cursor.execute("SELECT * FROM rooms WHERE room_number = ?", (room_number,))
                if cursor.fetchone():
                    messagebox.showerror("错误", "该房间号已存在")
                    return

                # 插入房间数据，使用用户输入的清洁状态
                cursor.execute(
                    "INSERT INTO rooms (room_number, room_type, price, status, clean_status) "
                    "VALUES (?, ?, ?, '空闲', ?)",
                    (room_number, room_type, price, clean_status)
                )
                conn.commit()
                messagebox.showinfo("成功", "房间添加成功")
                add_room_win.destroy()
            except Exception as e:
                messagebox.showerror("错误", f"添加失败：{str(e)}")
            finally:
                if 'conn' in locals():
                    conn.close()

        ttk.Button(add_room_win, text="保存", command=save_room).grid(row=4, column=0, columnspan=2, pady=10)

    def modify_room(self):
        # 创建修改房间信息的顶层窗口
        modify_room_win = tk.Toplevel(self.root)
        modify_room_win.title("修改房间信息")
        modify_room_win.geometry("400x250")

        # 房间号标签与输入框（用于查询要修改的房间）
        ttk.Label(modify_room_win, text="房间号:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        room_number_entry = ttk.Entry(modify_room_win)
        room_number_entry.grid(row=0, column=1, padx=5, pady=5)

        def query_room():
            room_number = room_number_entry.get()
            if not room_number.isdigit():
                messagebox.showerror("错误", "请输入有效的房间号（整数）")
                return

            try:
                conn = sqlite3.connect('hotel.db')
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT room_type, price, status, clean_status FROM rooms WHERE room_number = ?",
                    (room_number,)
                )
                result = cursor.fetchone()

                if result:
                    # 填充现有数据到输入框
                    room_type_entry.delete(0, tk.END)
                    room_type_entry.insert(0, result[0])
                    price_entry.delete(0, tk.END)
                    price_entry.insert(0, result[1])
                    # 修复：添加清洁状态的填充
                    clean_status_entry.delete(0, tk.END)
                    clean_status_entry.insert(0, result[3])
                else:
                    messagebox.showerror("错误", "未找到该房间号对应的房间")
            finally:
                if 'conn' in locals():
                    conn.close()

        ttk.Button(modify_room_win, text="查询", command=query_room).grid(row=0, column=2, padx=5, pady=5)

        # 房间类型标签与输入框（可修改）
        ttk.Label(modify_room_win, text="房间类型:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        room_type_entry = ttk.Entry(modify_room_win)
        room_type_entry.grid(row=1, column=1, padx=5, pady=5)

        # 价钱标签与输入框（可修改）
        ttk.Label(modify_room_win, text="价钱(元):").grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
        price_entry = ttk.Entry(modify_room_win)
        price_entry.grid(row=2, column=1, padx=5, pady=5)

        # 清洁状态标签与输入框（可修改）
        ttk.Label(modify_room_win, text="清洁状态:").grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)
        clean_status_entry = ttk.Entry(modify_room_win)  # 修正变量名，避免与price_entry冲突
        clean_status_entry.grid(row=3, column=1, padx=5, pady=5)

        def save_modification():
            room_number = room_number_entry.get()
            if not room_number.isdigit():
                messagebox.showerror("错误", "请输入有效的房间号（整数）")
                return

            room_type = room_type_entry.get()
            price = price_entry.get()
            clean_status = clean_status_entry.get()  # 获取清洁状态

            # 校验所有必填项
            if not (room_type and price and clean_status):
                messagebox.showerror("错误", "房间类型、价钱和清洁状态均为必填项")
                return

            try:
                float(price)  # 校验价钱格式
            except ValueError:
                messagebox.showerror("错误", "价钱必须为有效数字（如：300.0）")
                return

            try:
                conn = sqlite3.connect('hotel.db')
                cursor = conn.cursor()
                # 更新房间信息，包括清洁状态
                cursor.execute(
                    "UPDATE rooms SET room_type = ?, price = ?, clean_status = ? WHERE room_number = ?",
                    (room_type, price, clean_status, room_number)
                )
                if cursor.rowcount == 0:
                    messagebox.showerror("错误", "未找到该房间号对应的房间，修改失败")
                else:
                    conn.commit()
                    messagebox.showinfo("成功", "房间信息修改成功")
                    modify_room_win.destroy()
            except Exception as e:
                messagebox.showerror("错误", f"修改失败：{str(e)}")
            finally:
                if 'conn' in locals():
                    conn.close()

        ttk.Button(modify_room_win, text="保存修改", command=save_modification).grid(row=4, column=0, columnspan=2,
                                                                                     pady=10)

    def view_all_rooms(self):
        # 创建查看房间列表的顶层窗口
        view_rooms_win = tk.Toplevel(self.root)
        view_rooms_win.title("房间列表")
        view_rooms_win.geometry("600x400")

        # 创建树状视图展示房间数据
        tree = ttk.Treeview(view_rooms_win, columns=("房间号", "房间类型", "价钱", "状态", "清洁状态"),
                            show='headings', selectmode='browse')
        tree.heading("房间号", text="房间号")
        tree.heading("房间类型", text="房间类型")
        tree.heading("价钱", text="价钱(元)")
        tree.heading("状态", text="状态")
        tree.heading("清洁状态", text="清洁状态")
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # 添加滚动条
        scrollbar = ttk.Scrollbar(view_rooms_win, orient='vertical', command=tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        tree.configure(yscrollcommand=scrollbar.set)

        try:
            conn = sqlite3.connect('hotel.db')
            cursor = conn.cursor()
            # 查询房间表的所有字段
            cursor.execute("SELECT room_number, room_type, price, status, clean_status FROM rooms")
            results = cursor.fetchall()
            for row in results:
                tree.insert('', tk.END, values=row)
        finally:
            if 'conn' in locals():
                conn.close()